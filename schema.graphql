scalar EmailAddress
scalar DateTime
scalar Date
scalar URL

input DateQuery {
  lt: Date
  lte: Date
  gt: Date
  gte: Date
  eq: Date
}

input DateTimeQuery {
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  eq: DateTime
}

type AsanaPageInfo {
  nextPage: String
  hasNextPage: Boolean!
}

type Workspace {
  id: ID!
  name: String
  projects(first: Int, after: String, archived: Boolean): ProjectConnection!
}

type WorkspaceConnection {
  nodes: [Workspace]
  pageInfo: AsanaPageInfo
}

type BurndownPoint {
  date: Date!
  completed: Float!
  expected: Float!
}

type PageInfo {
  startCursor: String
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

enum OrderDirection {
  ASC
  DESC
}

type BurndownEdge {
  node: Burndown!
  cursor: String!
}

type BurndownConnection {
  totalCount: Int!
  edges: [BurndownEdge]!
  pageInfo: PageInfo!
}

enum BurndownField {
  CREATED_AT
  MODIFIED_AT
}

input BurndownOrder {
  direction: OrderDirection!
  field: BurndownField!
}

type Burndown {
  id: ID!
  name: String
  description: String
  project: Project!
  createdAt: DateTime
  modifiedAt: DateTime
  tasks(first: Int, after: String, completed: Boolean, hasPoints: Boolean, hasDueDate: Boolean, orderBy: TaskOrder, dueOn: DateQuery, completedAt: DateTimeQuery): BurndownTaskConnection!
  path: [BurndownPoint]!
  user: User!
}

input BurndownInput {
  id: ID!
  name: String
  description: String
  projectId: ID!
  tasks: [TaskInput]!
}

type ProjectStatus {
  text: String
  color: String
}

type Project {
  id: ID!
  name: String
  description: String
  color: String
  status: ProjectStatus
  url: URL
  archived: Boolean!
  createdAt: DateTime!
  modifiedAt: DateTime!
  dueOn: Date
  startOn: Date
  tasks(first: Int, after: String): TaskConnection!
  burndowns(first: Int, after: String, orderBy: BurndownOrder): BurndownConnection!
  burndown: Burndown!
  workspace: Workspace!
}
  
type ProjectConnection {
  nodes: [Project]
  pageInfo: AsanaPageInfo!
}

enum TaskField {
  TASK_ID
  STORY_POINTS
  COMPLETED_AT
  DUE_ON
  CREATED_AT
  MODIFIED_AT
}

input TaskOrder {
  direction: OrderDirection!
  field: TaskField!
}

type Task {
  id: ID!
  taskId: ID!
  name: String
  storyPoints: Float
  completed: Boolean
  completedAt: DateTime
  dueOn: Date
  hasDueDate: Boolean!
  createdAt: DateTime
  modifiedAt: DateTime
  hasPoints: Boolean!
}

input TaskInput {
  id: ID!
  taskId: ID!
  name: String
  storyPoints: Float
  completed: Boolean
  completedAt: DateTime
  createdAt: DateTime!
  modifiedAt: DateTime
  dueOn: Date
  hasPoints: Boolean
}

type TaskConnection {
  nodes: [Task]
  pageInfo: AsanaPageInfo
}

type TaskEdge {
  node: Task!
  cursor: String!
}

type BurndownTaskConnection {
  totalPoints: Float!
  totalCount: Int!
  edges: [TaskEdge]
  pageInfo: PageInfo!
}

enum PhotoSize {
  SIZE_21X21
  SIZE_27X27
  SIZE_36X36
  SIZE_60X60
  SIZE_128X128
}

type User {
  id: ID!
  email: EmailAddress!
  name: String!
  photo(size: PhotoSize!): URL
  workspaces(first: Int, after: String): WorkspaceConnection!
  burndowns(first: Int, after: String, orderBy: BurndownOrder): BurndownConnection!
}

type Query {
  viewer: User
  workspace(id: ID!): Workspace
  project(id: ID!): Project
  task(id: ID!): Task
  burndown(id: ID!): Burndown
}

type Mutation {
  saveBurndown(burndown: BurndownInput!): Burndown!
}