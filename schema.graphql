scalar EmailAddress
scalar DateTime
scalar Date
scalar URL

type PageInfo {
  offset: String
  hasNextPage: Boolean!
}

type Workspace {
  id: ID!
  name: String
  projects(first: Int, after: String, archived: Boolean): ProjectConnection!
}

type WorkspaceConnection {
  nodes: [Workspace]
  nextPage: String
}

type ProjectStatus {
  text: String
  color: String
}

type Project {
  id: ID!
  name: String
  description: String
  color: String
  status: ProjectStatus
  url: URL
  archived: Boolean!
  createdAt: DateTime!
  modifiedAt: DateTime!
  dueOn: Date
  startOn: Date
  tasks(first: Int, after: String): TaskConnection!
  workspace: Workspace!
}
  
type ProjectConnection {
  nodes: [Project]
  nextPage: String
}

type Task {
  id: ID!
  name: String
  storyPoints: Float
  completed: Boolean
  completedAt: DateTime
  dueOn: Date
  createdAt: DateTime
  modifiedAt: DateTime
  defaultPoints: Boolean
}

type TaskConnection {
  nodes: [Task]
  nextPage: String
}

enum PhotoSize {
  SIZE_21X21
  SIZE_27X27
  SIZE_36X36
  SIZE_60X60
  SIZE_128X128
}

type User {
  id: ID!
  email: EmailAddress!
  name: String!
  photo(size: PhotoSize!): URL
  workspaces(first: Int, after: String): WorkspaceConnection!
}

type Query {
  viewer: User
  workspace(id: ID!): Workspace
  project(id: ID!): Project
  task(id: ID!): Task
}